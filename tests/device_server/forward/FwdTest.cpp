/*----- PROTECTED REGION ID(FwdTest.cpp) ENABLED START -----*/
	/* clang-format on */
//=============================================================================
//
// file :        FwdTest.cpp
//
// description : C++ source for the FwdTest class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               FwdTest are implemented in this file.
//
// project :
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include "FwdTest.h"
#include "FwdTestClass.h"

	/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	FwdTest.cpp

/**
 *  FwdTest class description:
 *
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace FwdTest_ns
{
/*----- PROTECTED REGION ID(FwdTest::namespace_starting) ENABLED START -----*/
	/* clang-format on */

//	static initializations

	/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	FwdTest::namespace_starting

//--------------------------------------------------------
/**
 *	Method     : FwdTest::FwdTest()
 *	Description: Constructors for a Tango device
 *                implementing the classFwdTest
 */
//--------------------------------------------------------
FwdTest::FwdTest(Tango::DeviceClass *cl, std::string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(FwdTest::constructor_1) ENABLED START -----*/
	/* clang-format on */
	init_device();

	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	FwdTest::constructor_1
}
//--------------------------------------------------------
FwdTest::FwdTest(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(FwdTest::constructor_2) ENABLED START -----*/
	/* clang-format on */
	init_device();

	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	FwdTest::constructor_2
}
//--------------------------------------------------------
FwdTest::FwdTest(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(FwdTest::constructor_3) ENABLED START -----*/
	/* clang-format on */
	init_device();

	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	FwdTest::constructor_3
}
//--------------------------------------------------------
FwdTest::~FwdTest()
{
	delete_device();
}

//--------------------------------------------------------
/**
 *	Method     : FwdTest::delete_device()
 *	Description: will be called at device destruction or at init command
 */
//--------------------------------------------------------
void FwdTest::delete_device()
{
	DEBUG_STREAM << "FwdTest::delete_device() " << device_name << std::endl;
	/*----- PROTECTED REGION ID(FwdTest::delete_device) ENABLED START -----*/
	/* clang-format on */

	//	Delete device allocated objects

	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	FwdTest::delete_device
}

//--------------------------------------------------------
/**
 *	Method     : FwdTest::init_device()
 *	Description: will be called at device initialization.
 */
//--------------------------------------------------------
void FwdTest::init_device()
{
	DEBUG_STREAM << "FwdTest::init_device() create device " << device_name << std::endl;
	/*----- PROTECTED REGION ID(FwdTest::init_device_before) ENABLED START -----*/
	/* clang-format on */

	//	Initialization before get_device_property() call

	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	FwdTest::init_device_before

	//	No device property to be read from database

	/*----- PROTECTED REGION ID(FwdTest::init_device) ENABLED START -----*/
	/* clang-format on */

	set_state(Tango::ON);

	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	FwdTest::init_device
}


//--------------------------------------------------------
/**
 *	Method     : FwdTest::always_executed_hook()
 *	Description: method always executed before any command is executed
 */
//--------------------------------------------------------
void FwdTest::always_executed_hook()
{
	DEBUG_STREAM << "FwdTest::always_executed_hook()  " << device_name << std::endl;
	/*----- PROTECTED REGION ID(FwdTest::always_executed_hook) ENABLED START -----*/
	/* clang-format on */

	//	code always executed before all requests

	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	FwdTest::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method     : FwdTest::read_attr_hardware()
 *	Description: Hardware acquisition for attributes
 */
//--------------------------------------------------------
void FwdTest::read_attr_hardware(TANGO_UNUSED(std::vector<long> &attr_list))
{
	DEBUG_STREAM << "FwdTest::read_attr_hardware(std::vector<long> &attr_list) entering... " << std::endl;
	/*----- PROTECTED REGION ID(FwdTest::read_attr_hardware) ENABLED START -----*/
	/* clang-format on */

	//	Add your own code

	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	FwdTest::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method     : FwdTest::add_dynamic_attributes()
 *	Description: Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void FwdTest::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(FwdTest::add_dynamic_attributes) ENABLED START -----*/
	/* clang-format on */

	//	Add your own code to create and add dynamic attributes if any

	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	FwdTest::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method     : FwdTest::add_dynamic_commands()
 *	Description: Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void FwdTest::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(FwdTest::add_dynamic_commands) ENABLED START -----*/
	/* clang-format on */
	//	Add your own code to create and add dynamic commands if any
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	FwdTest::add_dynamic_commands
}

/*----- PROTECTED REGION ID(FwdTest::namespace_ending) ENABLED START -----*/
	/* clang-format on */

//	Additional Methods

	/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	FwdTest::namespace_ending
} //	namespace
